package nz.ac.vuw.ecs.swen225.gp20.maze;

import javax.json.Json;
import javax.json.JsonObjectBuilder;
import java.util.Objects;

/**
 * Tile class declares all of the required fields and methods for any tile on the maze.
 *
 * @author Benjamin Doornbos 300487256
 */
public abstract class Tile {
    private final String imageURl;
    private final int col;
    private final int row;
    private final boolean accessible;
    private final boolean freeOnEntry;
    private boolean occupied;
    private boolean hasBlock = false;

    /**
     * Initializes all required fields
     *
     * @param imageURl    the URL for the image corresponding to a tile
     * @param col         col in the maze array
     * @param row         row in the maze array
     * @param accessible  whether an actor can walk onto this tile
     * @param freeOnEntry whether this tile needs to become free when a player enters it
     */
    public Tile(String imageURl, int col, int row, boolean accessible, boolean freeOnEntry) {
        this.imageURl = imageURl;
        this.col = col;
        this.row = row;
        this.accessible = accessible;
        this.freeOnEntry = freeOnEntry;
        this.occupied = false;
    }

    /**
     * This will perform actions required once an actor enters this tile
     */
    public void onEntry() {
        setOccupied(true);
    }

    /**
     * This will perform actions required once an actor exits this tile
     */
    public void onExit() {
        setOccupied(false);
    }

    /**
     * Gets whether this tile is occupied
     *
     * @return Whether this tile is occupied
     */
    public boolean isOccupied() {
        return occupied;
    }

    /**
     * Change the value of the occupied boolean
     *
     * @param occupied whether this tile is occupied
     */
    public void setOccupied(boolean occupied) {
        this.occupied = occupied;
    }

    /**
     * Gets whether this tile needs to be changed to a free tile when a player enters it
     *
     * @return Whether this tile needs to be changed to a free tile when a player enters it
     */
    public boolean isFreeOnEntry() {
        return freeOnEntry;
    }

    /**
     * Returns whether an actor can step on this tile
     *
     * @return whether an actor can step on this tile
     */
    public boolean isAccessible() {
        return accessible;
    }

    /**
     * Gets the string that is the URL of the image representation for this object
     *
     * @return the string that is the URL of the image representation for this object
     */
    public String getImageURl() {
        return imageURl;
    }

    /**
     * Gets which col in the maze this tile is in
     *
     * @return col in the maze this tile is in
     */
    public int getCol() {
        return col;
    }

    /**
     * Gets which row in the maze this tile is in
     *
     * @return row in the maze this tile is in
     */
    public int getRow() {
        return row;
    }

    /**
     * Gets whether there is a block on this tile
     *
     * @return whether there is a block on this tile
     */
    public boolean hasBlock() {
        return hasBlock;
    }

    /**
     * Sets whether there is now a block on this tile
     *
     * @param hasBlock whether there is now a block on this tile
     */
    public void setHasBlock(boolean hasBlock) {
        this.hasBlock = hasBlock;
    }

    /**
     * Creates and gets the json object for saving to file
     *
     * @return json object for saving to file
     */
    public JsonObjectBuilder getJson() {
        return Json.createObjectBuilder()
                .add("type", getClass().getSimpleName()).add("col", col).add("row", row);
    }

    //-----Generated by Intellij-----

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Tile tile = (Tile) o;
        return col == tile.col &&
                row == tile.row;
    }

    @Override
    public int hashCode() {
        return Objects.hash(col, row);
    }
}
